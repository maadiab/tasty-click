// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package database

import (
	"context"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (created_at,updated_at) VALUES (NOW(),NOW())
RETURNING id, created_at, updated_at
`

func (q *Queries) CreateOrder(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createOrder)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id =$1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOneOrder = `-- name: GetOneOrder :one
SELECT FROM orders WHERE id=$1
`

type GetOneOrderRow struct {
}

func (q *Queries) GetOneOrder(ctx context.Context, id int32) (GetOneOrderRow, error) {
	row := q.db.QueryRowContext(ctx, getOneOrder, id)
	var i GetOneOrderRow
	err := row.Scan()
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, created_at, updated_at FROM orders
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders SET updated_at = NOW() WHERE id =$1
`

func (q *Queries) UpdateOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateOrder, id)
	return err
}
