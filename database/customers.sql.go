// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package database

import (
	"context"
)

const addCustomer = `-- name: AddCustomer :exec
INSERT INTO customers (name,mobile,email,password) VALUES ($1,$2,$3,$4)
RETURNING id, name, mobile, email, password
`

type AddCustomerParams struct {
	Name     string
	Mobile   string
	Email    string
	Password string
}

func (q *Queries) AddCustomer(ctx context.Context, arg AddCustomerParams) error {
	_, err := q.db.ExecContext(ctx, addCustomer,
		arg.Name,
		arg.Mobile,
		arg.Email,
		arg.Password,
	)
	return err
}

const deleteCustomr = `-- name: DeleteCustomr :exec
DELETE FROM customers WHERE id=$1
`

func (q *Queries) DeleteCustomr(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCustomr, id)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, name, mobile, email, password FROM customers
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Mobile,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, mobile, email, password FROM customers WHERE id =$1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mobile,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers SET name=$1,mobile=$2,email=$3 WHERE id=$4
`

type UpdateCustomerParams struct {
	Name   string
	Mobile string
	Email  string
	ID     int32
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.Name,
		arg.Mobile,
		arg.Email,
		arg.ID,
	)
	return err
}
