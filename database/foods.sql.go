// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: foods.sql

package database

import (
	"context"
)

const addFoodPhoto = `-- name: AddFoodPhoto :exec
UPDATE foods SET picture =$1 WHERE id =$2
`

type AddFoodPhotoParams struct {
	Picture string
	ID      int32
}

func (q *Queries) AddFoodPhoto(ctx context.Context, arg AddFoodPhotoParams) error {
	_, err := q.db.ExecContext(ctx, addFoodPhoto, arg.Picture, arg.ID)
	return err
}

const createFood = `-- name: CreateFood :exec
INSERT INTO foods (name,price,picture,category)
VALUES ($1,$2,$3,$4)
RETURNING id, name, price, picture, category
`

type CreateFoodParams struct {
	Name     string
	Price    int32
	Picture  string
	Category string
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) error {
	_, err := q.db.ExecContext(ctx, createFood,
		arg.Name,
		arg.Price,
		arg.Picture,
		arg.Category,
	)
	return err
}

const deleteFood = `-- name: DeleteFood :exec
DELETE FROM foods WHERE id =$1
`

func (q *Queries) DeleteFood(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFood, id)
	return err
}

const getFoods = `-- name: GetFoods :many
SELECT id, name, price, picture, category FROM foods
`

func (q *Queries) GetFoods(ctx context.Context) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, getFoods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Picture,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneFood = `-- name: GetOneFood :one
SELECT id, name, price, picture, category FROM foods WHERE id =$1
`

func (q *Queries) GetOneFood(ctx context.Context, id int32) (Food, error) {
	row := q.db.QueryRowContext(ctx, getOneFood, id)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Picture,
		&i.Category,
	)
	return i, err
}

const updateFood = `-- name: UpdateFood :exec
UPDATE foods SET name=$1,price=$2,picture=$3,category=$4 WHERE id =$5
`

type UpdateFoodParams struct {
	Name     string
	Price    int32
	Picture  string
	Category string
	ID       int32
}

func (q *Queries) UpdateFood(ctx context.Context, arg UpdateFoodParams) error {
	_, err := q.db.ExecContext(ctx, updateFood,
		arg.Name,
		arg.Price,
		arg.Picture,
		arg.Category,
		arg.ID,
	)
	return err
}
