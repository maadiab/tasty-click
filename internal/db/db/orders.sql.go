// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"
)

const assignDriverToOrder = `-- name: AssignDriverToOrder :exec
UPDATE orders SET driver_id = $2, status = 'delivering', updated_at = NOW() WHERE id = $1
`

type AssignDriverToOrderParams struct {
	ID       int32
	DriverID sql.NullInt32
}

func (q *Queries) AssignDriverToOrder(ctx context.Context, arg AssignDriverToOrderParams) error {
	_, err := q.db.ExecContext(ctx, assignDriverToOrder, arg.ID, arg.DriverID)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, user_id, driver_id, status, total_amount, delivery_address, created_at, updated_at)
VALUES (gen_random_uuid(), $1, NULL, 'pending', $2, $3, NOW(), NOW())
RETURNING id, user_id, driver_id, total_amount, status, payment_method, delivery_address, notes, created_at, updated_at
`

type CreateOrderParams struct {
	UserID          sql.NullInt32
	TotalAmount     string
	DeliveryAddress sql.NullString
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.DeliveryAddress)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.DeliveryAddress,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, driver_id, total_amount, status, payment_method, delivery_address, notes, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DriverID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.DeliveryAddress,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT id, user_id, driver_id, total_amount, status, payment_method, delivery_address, notes, created_at, updated_at FROM orders WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID sql.NullInt32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DriverID,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.DeliveryAddress,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders SET status = $2, updated_at = NOW() WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     int32
	Status sql.NullString
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
