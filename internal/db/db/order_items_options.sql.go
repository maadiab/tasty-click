// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items_options.sql

package db

import (
	"context"
	"database/sql"
)

const addOrderItemOption = `-- name: AddOrderItemOption :exec
INSERT INTO order_item_options (id, order_item_id, option_id, price_difference)
VALUES (gen_random_uuid(), $1, $2, $3)
`

type AddOrderItemOptionParams struct {
	OrderItemID     sql.NullInt32
	OptionID        sql.NullInt32
	PriceDifference sql.NullString
}

func (q *Queries) AddOrderItemOption(ctx context.Context, arg AddOrderItemOptionParams) error {
	_, err := q.db.ExecContext(ctx, addOrderItemOption, arg.OrderItemID, arg.OptionID, arg.PriceDifference)
	return err
}

const getOrderItemOptions = `-- name: GetOrderItemOptions :many
SELECT id, order_item_id, option_id, price_difference FROM order_item_options WHERE order_item_id = $1
`

func (q *Queries) GetOrderItemOptions(ctx context.Context, orderItemID sql.NullInt32) ([]OrderItemOption, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemOptions, orderItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItemOption
	for rows.Next() {
		var i OrderItemOption
		if err := rows.Scan(
			&i.ID,
			&i.OrderItemID,
			&i.OptionID,
			&i.PriceDifference,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
