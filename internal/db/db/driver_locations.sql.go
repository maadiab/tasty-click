// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: driver_locations.sql

package db

import (
	"context"
	"database/sql"
)

const getDriverLocation = `-- name: GetDriverLocation :one
SELECT id, driver_id, latitude, longitude, updated_at FROM driver_locations WHERE driver_id = $1
`

func (q *Queries) GetDriverLocation(ctx context.Context, driverID sql.NullInt32) (DriverLocation, error) {
	row := q.db.QueryRowContext(ctx, getDriverLocation, driverID)
	var i DriverLocation
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.Latitude,
		&i.Longitude,
		&i.UpdatedAt,
	)
	return i, err
}

const getNearbyDrivers = `-- name: GetNearbyDrivers :many
SELECT id, driver_id, latitude, longitude, updated_at FROM driver_locations
WHERE earth_distance(
  ll_to_earth($1, $2),
  ll_to_earth(latitude, longitude)
) < $3
`

type GetNearbyDriversParams struct {
	LlToEarth   interface{}
	LlToEarth_2 interface{}
	Latitude    float64
}

func (q *Queries) GetNearbyDrivers(ctx context.Context, arg GetNearbyDriversParams) ([]DriverLocation, error) {
	rows, err := q.db.QueryContext(ctx, getNearbyDrivers, arg.LlToEarth, arg.LlToEarth_2, arg.Latitude)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriverLocation
	for rows.Next() {
		var i DriverLocation
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.Latitude,
			&i.Longitude,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriverLocation = `-- name: UpdateDriverLocation :exec
INSERT INTO driver_locations (id, driver_id, latitude, longitude, updated_at)
VALUES (gen_random_uuid(), $1, $2, $3, NOW())
ON CONFLICT (driver_id)
DO UPDATE SET latitude = EXCLUDED.latitude, longitude = EXCLUDED.longitude, updated_at = NOW()
`

type UpdateDriverLocationParams struct {
	DriverID  sql.NullInt32
	Latitude  float64
	Longitude float64
}

func (q *Queries) UpdateDriverLocation(ctx context.Context, arg UpdateDriverLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateDriverLocation, arg.DriverID, arg.Latitude, arg.Longitude)
	return err
}
