// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package db

import (
	"context"
	"database/sql"
)

const addOrderItem = `-- name: AddOrderItem :one
INSERT INTO order_items (id, order_id, menu_item_id, quantity, price)
VALUES (gen_random_uuid(), $1, $2, $3, $4)
RETURNING id, order_id, menu_item_id, quantity, price, note
`

type AddOrderItemParams struct {
	OrderID    sql.NullInt32
	MenuItemID sql.NullInt32
	Quantity   int32
	Price      string
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, addOrderItem,
		arg.OrderID,
		arg.MenuItemID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.MenuItemID,
		&i.Quantity,
		&i.Price,
		&i.Note,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, menu_item_id, quantity, price, note FROM order_items WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID sql.NullInt32) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.MenuItemID,
			&i.Quantity,
			&i.Price,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
