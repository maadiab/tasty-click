// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menu_items.sql

package db

import (
	"context"
	"database/sql"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (id, category_id, name, description, price, image_url, available)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, TRUE)
RETURNING id, category_id, name, description, price, image_url, available
`

type CreateMenuItemParams struct {
	CategoryID  sql.NullInt32
	Name        string
	Description sql.NullString
	Price       string
	ImageUrl    sql.NullString
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageUrl,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
		&i.Available,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menu_items WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, id)
	return err
}

const getMenuItemByID = `-- name: GetMenuItemByID :one
SELECT id, category_id, name, description, price, image_url, available FROM menu_items WHERE id = $1
`

func (q *Queries) GetMenuItemByID(ctx context.Context, id int32) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemByID, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
		&i.Available,
	)
	return i, err
}

const getMenuItemsByCategory = `-- name: GetMenuItemsByCategory :many
SELECT id, category_id, name, description, price, image_url, available FROM menu_items WHERE category_id = $1 ORDER BY name
`

func (q *Queries) GetMenuItemsByCategory(ctx context.Context, categoryID sql.NullInt32) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItemsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageUrl,
			&i.Available,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItemAvailability = `-- name: UpdateMenuItemAvailability :exec
UPDATE menu_items SET available = $2 WHERE id = $1
`

type UpdateMenuItemAvailabilityParams struct {
	ID        int32
	Available sql.NullBool
}

func (q *Queries) UpdateMenuItemAvailability(ctx context.Context, arg UpdateMenuItemAvailabilityParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuItemAvailability, arg.ID, arg.Available)
	return err
}
