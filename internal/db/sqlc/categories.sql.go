// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"
)

const createMenuCategory = `-- name: CreateMenuCategory :one
INSERT INTO categories (id, name)
VALUES (gen_random_uuid(), $1)
RETURNING id, name, description, image_url
`

func (q *Queries) CreateMenuCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createMenuCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
	)
	return i, err
}

const deleteMenuCategory = `-- name: DeleteMenuCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteMenuCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuCategory, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, description, image_url FROM categories ORDER BY name
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
