// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const clearUserToken = `-- name: ClearUserToken :exec
UPDATE users
SET token = NULL, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) ClearUserToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, clearUserToken, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, phone, email, password_hash, role, token, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, $3, $4, COALESCE($5, 'customer'), NULL, NOW(), NOW())
RETURNING id, name, email, password_hash, phone, role, address, token, created_at, updated_at
`

type CreateUserParams struct {
	Name         string
	Phone        sql.NullString
	Email        string
	PasswordHash string
	Column5      interface{}
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.PasswordHash,
		arg.Column5,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Role,
		&i.Address,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, phone, role, address, token, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Role,
		&i.Address,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, email, password_hash, phone, role, address, token, created_at, updated_at FROM users WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Role,
		&i.Address,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE users
SET name = $2, email = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateUserProfileParams struct {
	ID    int32
	Name  string
	Email string
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile, arg.ID, arg.Name, arg.Email)
	return err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE users
SET token = $2, last_login = NOW(), updated_at = NOW()
WHERE id = $1
`

type UpdateUserTokenParams struct {
	ID    int32
	Token sql.NullString
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserToken, arg.ID, arg.Token)
	return err
}
