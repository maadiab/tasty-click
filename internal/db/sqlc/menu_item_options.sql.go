// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menu_item_options.sql

package db

import (
	"context"
	"database/sql"
)

const createMenuItemOption = `-- name: CreateMenuItemOption :one
INSERT INTO menu_item_options (id, menu_item_id, name, price)
VALUES (gen_random_uuid(), $1, $2, $3)
RETURNING id, menu_item_id, name, price
`

type CreateMenuItemOptionParams struct {
	MenuItemID sql.NullInt32
	Name       string
	Price      sql.NullString
}

func (q *Queries) CreateMenuItemOption(ctx context.Context, arg CreateMenuItemOptionParams) (MenuItemOption, error) {
	row := q.db.QueryRowContext(ctx, createMenuItemOption, arg.MenuItemID, arg.Name, arg.Price)
	var i MenuItemOption
	err := row.Scan(
		&i.ID,
		&i.MenuItemID,
		&i.Name,
		&i.Price,
	)
	return i, err
}

const deleteMenuItemOption = `-- name: DeleteMenuItemOption :exec
DELETE FROM menu_item_options WHERE id = $1
`

func (q *Queries) DeleteMenuItemOption(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItemOption, id)
	return err
}

const getOptionsForMenuItem = `-- name: GetOptionsForMenuItem :many
SELECT id, menu_item_id, name, price FROM menu_item_options WHERE menu_item_id = $1 ORDER BY name
`

func (q *Queries) GetOptionsForMenuItem(ctx context.Context, menuItemID sql.NullInt32) ([]MenuItemOption, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsForMenuItem, menuItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItemOption
	for rows.Next() {
		var i MenuItemOption
		if err := rows.Scan(
			&i.ID,
			&i.MenuItemID,
			&i.Name,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
